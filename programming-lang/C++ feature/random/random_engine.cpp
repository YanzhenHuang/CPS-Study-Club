// a better class uses for random number generation, replacing function rand() and srand().
// both default_random_engine and uniform_int_distirbution are declared in random header file
#include <iostream>
using namespace std;

#include <random>       // default_random_engine; uniform_int_distribution<>
#include <ctime>
#include <cassert>

#include "print_random_engine.h"

int main() {

    default_random_engine e;
    cout << e.min() << ' ' << e.max() << endl;  // the boundary value generated by the engine

    // default_random_engine(seed)     ,where the seed is optional
    default_random_engine a1;
    default_random_engine b1(time(0));      
    default_random_engine c1(1000234);
    default_random_engine d1(1000234);

    assert(a1() != b1());
    assert(c1() == d1());       // generate the same value in the first call
    assert(c1() == d1());       // generate the smae value in the second call

    // seed(integer_val)       ,where the integer_val is optional
    c1.seed(100);         
    assert(c1() != d1());       // generate diff. value in the third call

    uniform_int_distribution<unsigned> u1;
    uniform_int_distribution<unsigned> u2;
    uniform_int_distribution<unsigned> u12(1, 100);     // with range
    // it has the same methods with uniform_int_distribution included (min(), max(), seed())
    uniform_real_distribution<double> u3;
    uniform_real_distribution<double> u4(0, 2);      // generate floating-point number with range

    print_boundary(u1, u2, u3, u4);
    print_distribution(u1, u2, u3, u4);     

    // since the default_randem_engine is initialized in the print_distribution() and 
    // u1 and u2 have same value of seed, their sequences are the same.
    return 0;
}